# array　｜　配列とループ処理(for)を組み合わせる

## 前回の復習・・・テンプレートリテラル (ﾉ'_')ﾉ
例えば３つのスコアを文字列に埋め込んで表示したいとき、前回学習したテンプレートリテラルを使用して埋め込むことができる。
```
{
 
    const scores = [80, 90, 40];
    
    console.log(`Score：${scores[0]}点`);
    console.log(`Score：${scores[1]}点`);
    console.log(`Score：${scores[2]}点`);

}


実行結果↓↓  
  
Score：80点  
Score：90点  
Score：40点  

```
テンプレートリテラル思い出した！！  
あれ。。。でもこれ１００個要素があったら１００個書かないといけないの・・・？  
と思ったけどそんなわけはなかった！  

というわけで今日はforを使用したループ処理の組み合わせをさらに学習しました。

##　for文を使用し同じ実行結果を表示させる

今回の例は要素が０〜３未満の間で１ずつ増やして処理を実行したいため、下記のようなfor文となる。
```
{
 
    const scores = [80, 90, 40];
    
    先程までのコード↓↓
    // console.log(`Score：${scores[0]}点`);
    // console.log(`Score：${scores[1]}点`);
    // console.log(`Score：${scores[2]}点`);
    
　　 今回のコード↓↓　
    for (let i = 0; i < 3; i++)
    console.log(`Score：${scores[i]}点`);
    
    
    実行結果↓↓
    
    Score：80点  
    Score：90点  
    Score：40点  

}
```
実行結果が始めに復習で書いた、forを使用していない時の実行結果と同じになっている。
テンプレートリテラルの中のインデックス番号は`[i]`となることに注目。
このようにforを使用すれば例え１００個の要素を扱いたい時にでも簡単に実行することができる。


## 補足
### 要素数が増えたり減ったりした場合の書き換え
ちなみに`const scores = [80, 90, 40];`の要素数が増えたり減ったりするような場面はよくある。
上記のfor文の書き方だと`for (let i = 0; i < 3; i++)`の最大数である「３」をいちいち書き換えなくてはならなくなり手間になってしまう。
最大数 = length（要素数）であることに着目し、下記のように書くことができる。
要素が１つ増えた場合を例とすると・・・

```
{
 
    const scores = [80, 90, 40, 20];

    for (let i = 0; i < scores.length; i++)
    console.log(`Score：${scores[i]}点`);


    実行結果↓↓
    
    Score：80点  
    Score：90点  
    Score：40点  
    Score：20点
    
}
```

始めからこのように書いておけば、要素数がいくら変わっても、それに応じて実行結果に反映させることができる！きゃー素敵♡


今日はここまで٩( ᐛ )و
